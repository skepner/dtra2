sampleIdCeirs :: Record -> T.Text
sampleIdCeirs record =
  let raw = sampleId record
      prependCIP116 = T.take 4 raw == "217-"
  in if prependCIP116
     then T.concat ["CIP116", raw]
     else raw

----------------------------------------------------------------------

  initField {fColumn=48, fTitle="*uuid*", fRecord=setUuid, fExport=uuid, fValidator=validatorUuid, fIgnoreInMerge=True}
  ]

----------------------------------------------------------------------

normalizeFieldTitleText :: T.Text -> T.Text
normalizeFieldTitleText = T.replace "_" " " . T.toLower

validateFieldTitle :: [Cell] -> Field -> Maybe T.Text
validateFieldTitle cells field =
  let colNo = fColumn field
      expected = fTitle field
      cell = case drop colNo cells of
        [] -> CellEmpty
        cc -> head cc
  in
   case (expected, cell) of
    ("*uuid*", _) -> case validatorUuid Dirs.emptyDirectories cell of
                      Right _ -> Nothing
                      Left [t] -> Just $ fieldErrorPrefixS 1 colNo $ T.unpack t
                      _ -> Just $ fieldErrorPrefixS 1 colNo "original database id within DTRA system expected"
    (_, CellString text) | normalizeFieldTitleText text == expected -> Nothing
    _ -> Just $ fieldErrorPrefixS 1 colNo $ "invalid column label: \"" ++ cellAsString cell ++ "\" expected: \"" ++ T.unpack expected ++ "\""

----------------------------------------------------------------------
merge
----------------------------------------------------------------------
